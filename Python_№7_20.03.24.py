# Задание №7 от 20.03.24 по Python

# 1) Дан список чисел. Если в нем есть два соседних элемента одного знака, выведите эти числа. Если соседних элементов одного знака нет — не выводите ничего. Если таких пар соседей несколько — выведите первую пару.
# пример входных данных: -1 2 3 -1 -2
# пример выходных данных: 2 3

numbers = list(map(int, input().split()))  # ввод списка чисел

for i in range(1, len(numbers)):
    if (numbers[i] * numbers[i-1]) > 0:
        print(numbers[i-1], numbers[i])
        break

# 2) Дан список чисел. Определите, сколько в этом списке элементов, которые больше двух своих соседей, и выведите количество таких элементов. Крайние элементы списка никогда не учитываются, поскольку у них недостаточно соседей.
# пример входных данных: 1 5 1 5 1
# пример выходных данных: 2

numbers = list(map(int, input().split()))  # ввод списка чисел

count = 0

for i in range(1, len(numbers) - 1):  # итерируем по всем элементам списка, кроме первого и последнего
    if numbers[i] > numbers[i-1] and numbers[i] > numbers[i+1]:
        count += 1

print(count)

# Дан список чисел. Выведите значение наибольшего элемента в списке, а затем индекс этого элемента в списке. Если наибольших элементов несколько, выведите индекс первого из них.
# пример входных данных: 1 2 3 2 1
# пример выходных данных: 3 2

numbers = list(map(int, input().split()))  # ввод списка чисел

max_value = max(numbers)
max_index = numbers.index(max_value)

print(max_value, max_index)

# 4) Петя перешёл в другую школу. На уроке физкультуры ему понадобилось определить своё место в строю. Помогите ему это сделать.
# Программа получает на вход невозрастающую последовательность натуральных чисел, означающих рост каждого человека в строю. После этого вводится число X – рост Пети. Все числа во входных данных натуральные и не превышают 200.
# Выведите номер, под которым Петя должен встать в строй. Если в строю есть люди с одинаковым ростом, таким же, как у Пети, то он должен встать после них.
# пример входных данных:
# 165 163 160 160 157 157 155 154
# 162
# пример выходных данных: 3

heights = list(map(int, input().split()))  # ввод последовательности роста людей
petia_height = int(input())  # ввод роста Пети

position = 1
for i, height in enumerate(heights, 1):
    if petia_height <= height:
        position = i
        break

print(position)

# 5) Дан список, упорядоченный по неубыванию элементов в нем. Определите, сколько в нем различных элементов.
# пример входных данных: 1 2 2 3 3 3
# пример выходных данных: 3

numbers = list(map(int, input().split()))  # ввод списка чисел

unique_numbers = set(numbers)  # преобразование списка в множество для получения уникальных элементов

print(len(unique_numbers))

# 6) Переставьте соседние элементы списка (A[0] c A[1], A[2] c A[3] и т. д.). Если элементов нечетное число, то последний элемент остается на своем месте.
#
# пример входных данных: 1 2 3 4 5
#
# пример выходных данных: 2 1 4 3 5

numbers = list(map(int, input().split()))  # ввод списка чисел

for i in range(0, len(numbers) - 1, 2):
    numbers[i], numbers[i + 1] = numbers[i + 1], numbers[i]

print(*numbers)


# 7) В списке все элементы различны. Поменяйте местами минимальный и максимальный элемент этого списка.
#
# пример входных данных: 3 4 5 2 1
#
# пример выходных данных: 3 4 1 2 5

numbers = list(map(int, input().split()))  # ввод списка чисел

min_index = numbers.index(min(numbers))
max_index = numbers.index(max(numbers))

numbers[min_index], numbers[max_index] = numbers[max_index], numbers[min_index]

print(*numbers)


# 8) Дан список из чисел и индекс элемента в списке k. Удалите из списка элемент с индексом k, сдвинув влево все элементы, стоящие правее элемента с индексом k.
#
# Программа получает на вход список, затем число k. Программа сдвигает все элементы, а после этого удаляет последний элемент списка при помощи метода pop() без параметров.
#
# Программа должна осуществлять сдвиг непосредственно в списке, а не делать это при выводе элементов. Также нельзя использовать дополнительный список. Также не следует использовать метод pop(k) с параметром.
#
# пример входных данных:
#
# 7 6 5 4 3 2 1
#
# 2
#
# пример выходных данных: 7 6 4 3 2 1

numbers = list(map(int, input().split()))  # ввод списка чисел
k = int(input())  # ввод индекса элемента k

for i in range(k, len(numbers) - 1):
    numbers[i] = numbers[i + 1]

numbers.pop()  # удаляем последний элемент списка

print(*numbers)

# 9) Дан список целых чисел, число k и значение C. Необходимо вставить в список на позицию с индексом k элемент, равный C, сдвинув все элементы, имевшие индекс не менее k, вправо.
#
# Поскольку при этом количество элементов в списке увеличивается, после считывания списка в его конец нужно будет добавить новый элемент, используя метод append.
#
# Вставку необходимо осуществлять уже в считанном списке, не делая этого при выводе и не создавая дополнительного списка.
#
# пример входных данных:
#
# 7 6 5 4 3 2 1
#
# 2 0
#
# пример выходных данных: 7 6 0 5 4 3 2 1

numbers = list(map(int, input().split()))  # ввод списка целых чисел
k, C = map(int, input().split())  # ввод индекса k и значения C

numbers.append(0)  # добавляем временный элемент в конец списка

for i in range(len(numbers) - 1, k, -1):
    numbers[i] = numbers[i - 1]

numbers[k] = C  # вставляем значение C на позицию k

print(*numbers[:-1])  # выводим список без последнего временного элемента


# 10) Дан список чисел. Посчитайте, сколько в нем пар элементов, равных друг другу. Считается, что любые два элемента, равные друг другу образуют одну пару, которую необходимо посчитать.
#
# пример входных данных: 1 2 3 2 3
#
# пример выходных данных: 2

numbers = list(map(int, input().split()))  # ввод списка чисел

pair_count = 0
seen = set()

for num in numbers:
    if num in seen:
        pair_count += 1
        seen.remove(num)
    else:
        seen.add(num)

print(pair_count)
